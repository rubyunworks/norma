= Active DBA -- Simple Database Abstraction Layer

Active DBA ...

* Database abstraction through simple adapters (~100 lines) with a shared connector

   ActiveRecord::Base.establish_connection(:adapter => "sqlite", :dbfile => "dbfile")

   ActiveRecord::Base.establish_connection(
     :adapter  => "mysql", 
     :host     => "localhost", 
     :username => "me", 
     :password => "secret", 
     :database => "activerecord"
   )

  Learn more in link:classes/ActiveRecord/Base.html#M000081


* Logging support for Log4r[http://log4r.sourceforge.net] and Logger[http://www.ruby-doc.org/stdlib/libdoc/logger/rdoc]

    ActiveRecord::Base.logger = Logger.new(STDOUT)
    ActiveRecord::Base.logger = Log4r::Logger.new("Application Log")


== Simple example (1/2): Defining tables and classes (using MySQL)

Data definitions are specified only in the database. Active Record queries the database for 
the column names (that then serves to determine which attributes are valid) on regular
objects instantiation through the new constructor and relies on the column names in the rows
with the finders.
 
   # CREATE TABLE companies (
   #   id int(11) unsigned NOT NULL auto_increment,
   #   client_of int(11),
   #   name varchar(255),
   #   type varchar(100),
   #   PRIMARY KEY  (id)
   # )

Active Record automatically links the "Company" object to the "companies" table

   class Company < ActiveRecord::Base
     has_many :people, :class_name => "Person"
   end

   class Firm < Company
     has_many :clients
  
     def people_with_all_clients
      clients.inject([]) { |people, client| people + client.people }
     end
   end

The foreign_key is only necessary because we didn't use "firm_id" in the data definition
 
   class Client < Company
     belong_to :firm, :foreign_key => "client_of"
   end

   # CREATE TABLE people (
   #   id int(11) unsigned NOT NULL auto_increment,
   #   name text,
   #   company_id text,
   #   PRIMARY KEY  (id)
   # )

Active Record can't guess the table name itself from exceptions like these, so we help it...

   class Person < ActiveRecord::Base
     belong_to :company

     def self.table_name() "people" end
   end

== Simple example (2/2): Using the domain

Picking a database connection for all the active records

   ActiveRecord::Base.establish_connection(
     :adapter  => "mysql", 
     :host     => "localhost", 
     :username => "me", 
     :password => "secret", 
     :database => "activerecord"
   )

Create some fixtures

   firm = Firm.new("name" => "Next Angle")
   # SQL: INSERT INTO companies (name, type) VALUES("Next Angle", "Firm")
   firm.save

   client = Client.new("name" => "37signals", "client_of" => firm.id)
   # SQL: INSERT INTO companies (name, client_of, type) VALUES("37signals", 1, "Firm")
   client.save

Lots of different finders

   # SQL: SELECT * FROM companies WHERE id = 1
   next_angle = Company.find(1)

   # SQL: SELECT * FROM companies WHERE id = 1 AND type = 'Firm'
   next_angle = Firm.find(1)    

   # SQL: SELECT * FROM companies WHERE id = 1 AND name = 'Next Angle'
   next_angle = Company.find_first "name = 'Next Angle'"

   next_angle = Firm.find_by_sql("SELECT * FROM companies WHERE id = 1").first

The supertype, Company, will return subtype instances

   Firm === next_angle

All the dynamic methods added by the has_many macro

  next_angle.has_clients?  # true
  next_angle.clients_count # total number of clients
  all_clients = next_angle.clients

Constrained finds makes access security easier when ID comes from a web-app

   # SQL: SELECT * FROM companies WHERE client_of = 1 AND type = 'Client' AND id = 2
   thirty_seven_signals = next_angle.find_in_clients(2)

Bi-directional associations thanks to the "belong_to" macro

   thirty_seven_signals.has_firm? # true
   thirty_seven_signals.firm?(next_angle) # true


== Examples

Active Record ships with a couple of examples that should give you a good feel for
operating usage. Be sure to edit the <tt>examples/shared_setup.rb</tt> file for your
own database before running the examples. Possibly also the table definition SQL in 
the examples themselves.

It's also highly recommended to have a look at the unit tests. Read more in link:files/RUNNING_UNIT_TESTS.html


== Database support

Active Record ships with adapters for MySQL/Ruby[http://www.tmtm.org/en/mysql/ruby/] 
(compatible with Ruby/MySQL[http://www.tmtm.org/ruby/mysql/README_en.html]), 
PostgreSQL[http://www.postgresql.jp/interfaces/ruby/], and 
SQLite[http://rubyforge.org/projects/sqlite-ruby/] (needs SQLite 2.8.13 and SQLite-Ruby 1.1.2+).
The adapters are around 100 lines of code fulfilling the interface specified by 
ActiveRecord::ConnectionAdapters::AbstractAdapter. Writing a new adapter should be a small task --
especially considering the extensive test suite that'll make sure you're fulfilling the contract.


== Philosophy 

Active Record attempts to provide a coherent wrapping for the inconvenience that is 
object-relational mapping. The prime directive for this mapping has been to minimize
the amount of code needed to built a real-world domain model. This is made possible
by relying on a number of conventions that make it easy for Active Record to infer
complex relations and structures from a minimal amount of explicit direction.

Convention over Configuration:
* No XML-files!
* Lots of reflection and run-time extension
* Magic is not inherently a bad word 

Admit the Database:
* Lets you drop down to SQL for odd cases and performance
* Doesn't attempt to duplicate or replace data definitions


== Download

The latest version of Active Record can be found at

* http://rubyforge.org/project/showfiles.php?group_id=182

Documentation can be found at 

* http://ar.rubyonrails.org


== Installation

The prefered method of installing Active Record is through its GEM file. You'll need to have
RubyGems[http://rubygems.rubyforge.org/wiki/wiki.pl] installed for that, though. If you have,
then use:

  % [sudo] gem -i activerecord-0.7.5.gem --install-stub

You can also install Active Record the old-fashion way with the following command:

  % [sudo] ruby install.rb

from its distribution directory.


== License

Active Record is released under the same license as Ruby.


== Support

The Active Record homepage is http://activerecord.rubyonrails.org. You can find the Active Record
RubyForge page at http://rubyforge.org/projects/activerecord. And as Jim from Rake says:

   Feel free to submit commits or feature requests.  If you send a patch,
   remember to update the corresponding unit tests.  If fact, I prefer
   new feature to be submitted in the form of new unit tests.

For other information, feel free to ask on the ruby-talk mailing list
(which is mirrored to comp.lang.ruby) or contact mailto:david@loudthinking.com.

